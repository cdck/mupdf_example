apply plugin: 'maven-publish'

def NEXUS_MAVEN_URL = "http://127.0.0.1:8081/repository/mupdfLibrary/"
def NEXUS_USERNAME = "admin"
def NEXUS_PASSWORD = "cdck5689"

//与jitpack发布的保持同个组织名
def POM_GROUP_ID = "xlk"
//版本好
def POM_VERSION = "7.0"
//aar包方式
def POM_PACKAGING = "aar"
//下面三个数值自动读取模块名
def POM_NAME = ""
def POM_ARTIFACT_ID = "mupdf"
def POM_DESCRIPTION = ""

def depList = parent.getDependencies()
depList.getModules().each {
    println "数据。。" + this.name
    POM_ARTIFACT_ID = this.name
    POM_NAME = this.name
}

afterEvaluate {
    publishing {
        publications {
            aar_pub(MavenPublication) {
                groupId 'xlk'
                artifactId 'mupdf'
                version '9.0'

                pom {
                    packaging = "aar"
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def scopes = [configurations.compile]
                    if (configurations.hasProperty("api")) {
                        scopes.add(configurations.api)
                    }
                    if (configurations.hasProperty("implementation")) {
                        scopes.add(configurations.implementation)
                    }
                    if (configurations.hasProperty("debugImplementation")) {
                        scopes.add(configurations.debugImplementation)
                    }
                    if (configurations.hasProperty("releaseImplementation")) {
                        scopes.add(configurations.releaseImplementation)
                    }

                    scopes.each { scope ->
                        scope.allDependencies.each {
                            if (it instanceof ModuleDependency) {
                                boolean isTransitive = ((ModuleDependency) it).transitive
                                if (!isTransitive) {
                                    println "<<<< not transitive dependency: [${it.group}, ${it.name}, ${it.version}]"
                                    return
                                }
                            }

                            if (it.group == "${project.rootProject.name}.libs" || it.version == 'unspecified') {
                                return
                            }

                            if (it.group && it.name && it.version) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                dependencyNode.appendNode('scope', scope.name)
                            }
                        }
                    }
                    artifact androidSourcesJar//将源码打包进aar，如果不需要可以去掉
                    artifact androidJavadocsJar//将注释打包进aar，如果不需要可以去掉
                    artifact("$buildDir/outputs/aar/mupdflibrary.aar")
                    //artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                }
            }
        }

        repositories {
            maven {
                url NEXUS_MAVEN_URL
                credentials {
                    username NEXUS_USERNAME
                    password NEXUS_PASSWORD
                }
            }
        }
    }
}

// 产生相关配置文件的任务
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}